App.Views.ListProposal = Backbone.View.extend({
	events: {
		"click a[id^=proposals_refresh]": "refreshProposal",
		"click a[id^=proposals_remove]": "removeProposal",
		"click a[id^=proposals_unassign]": "unassignProposal"
	},
	initialize: function() {
		_.bindAll(this, 'addOne', 'addAll');
		
		this.collection = new App.Collections.Proposals();
		this.collection.bind('add', this.addOne);
		//this.collection.bind('refresh', this.addAll);
		this.collection.bind('reset', this.addAll);
		this.collection.bind('all', this.render);	
		
		this.getProposals();
	},
	addOne: function(proposal) {
		var proposal = new App.Views.ListItemProposal({model: proposal})
		$(this.el).append(proposal.render().el);
	},
	addAll: function() {
		$('tbody', $(this.el)).empty();
		//if we're using data tables
		if (this.options.useDataTables) {
			var aaData = [];
//console.log(this.collection.models);			
			var self = this;
			_.each(this.collection.models,function(proposal) {
				proposal.extractData();
				var col1 = '<a href="'+baseURI+'/proposals/'+proposal.id+'">'+proposal.get('nsf_id')+'</a> - '+proposal.title();
				var col2 = [];
				var users = proposal.assigned_users();
//console.log(proposal.attributes);		
//console.log(users);		
				_.each(users, function(user) {
					col2.push('<i class="icon-user"></i> <a href="'+baseURI+'/users/'+user.id+'">'+user.name+'</a>');
				});
				col2 = col2.join('<br />');
				//associations - last viewed
				var col3 = [];
				var associations = proposal.associations();
				associations = _.sortBy(associations, function(association){ association.lastviewed; });
//console.log(associations);				
				_.each(associations, function(association) {
//console.log(association.lastviewed);					
					if (association.lastviewed) col3.push($.timeago(association.lastviewed));
				});
				col3 = _.last(col3)?_.last(col3):''; //.join('<br />');
//console.log(col3);					
				var col4 = '';
				col4 += '<a href="'+baseURI+'/proposals/'+proposal.id+'"><i class="icon-zoom-in"></i>Show</a><br />';
//console.log(html);							
				if (self.options.allowEdit) {
					col4 += '<a href="'+baseURI+'/proposals/'+proposal.id+'/edit"><i class="icon-pencil"></i>Edit</a>';
					col4 += '<a href="#" id="proposals_remove_'+proposal.id+'"><i class="icon-remove"></i>Remove</a>';
					col4 += '<a href="#" id="proposals_refresh_'+proposal.id+'"><i class="icon-refresh"></i>Refresh</a>';
				} else {
					col4 += '<a href="#" id="proposals_unassign_'+proposal.id+'"><i class="icon-remove"></i>Remove</a>';
				}						
				aaData.push([col1, col2, col3, col4]);
			});
//console.log(aaData);			
			$(this.el).dataTable({
				"bDestroy":true,
				"bJQueryUI": true,
				"sPaginationType": "full_numbers",
				"iDisplayLength": 25,
				"aaData": aaData,
				"aoColumnDefs": [
					{ 
						"sTitle": "Title",
						"sWidth": "500",
						"aTargets": [ 0 ]
					},
					{
						"sTitle": "Assigned To",
						"aTargets": [ 1 ]
					},
					{
						"sTitle": "Last Viewed",
						"aTargets": [ 2 ]
					},
					{ 
						"sTitle": "Actions",
						"sClass": "proposal-actions",
						"aTargets": [ 3 ]
					}
				]
			});	
		} else {
			this.collection.each(this.addOne);			
		}
	},
	addProposal: function(proposal) {
		this.collection.add(proposal);
	},
	getProposals: function() {
		//make sure you get using json
		if (this.options.user_id) var url = this.collection.url+'/user/'+this.options.user_id+'.json';	
		else var url = this.collection.url+'.json';	
		this.collection.fetch({url: url});		
	},
	updateProposal: function(proposal) {
		//dirty way to do it, we should just update the collection instead of realoading it
		this.getProposals();
	},
	removeProposal: function(e) {
		e.preventDefault();
		if (!confirm('Are you sure?')) return false;
				
		//what is the id? //last elem in id attr
		var id = $(e.currentTarget).attr('id').split('_').pop();
		//load proposal
		var proposal = this.collection.get(id); //new Proposal({ id: id });
//console.log(proposal);		
		//this.collection.remove(proposal);
		var self = this;
		proposal.destroy({
			success: function(model, response) {
				self.addAll();
			}
		});
/*		var self = this;
		proposal.fetch({
			success: function(model,response) {
//console.log(model);	
				//post update to server
				model.remove({
					success: function() {
						//remove it from the collection
						//dirty way to update
						var params = {};
						if (self.user_id) params = {data: { user: self.user_id }};
						self.collection.fetch(params);
						//self.collection.remove(model);						
					}
				});
			}
		});*/
	},
	refreshProposal: function(e) {
		e.preventDefault();

		//what is the id? //last elem in id attr
		var id = $(e.currentTarget).attr('id').split('_').pop();

		//find proposal in collection
		var proposal = this.collection.get(id);

		//add a row below the current row to show the status
		/*var row = $(e.currentTarget).closest("tr");
		var template = '<tr id="loadstatus_'+id+'">';
		template += '<td><div class="alert" id="text_'+id+'"></div></td>';
		template += '<td id="component_proposals_'+id+'"><span class="label"><i class="icon-cog icon-white"></i> <span class="status">Pending</span></span></td>';
		template += '<td id="component_researchers_'+id+'"><span class="label"><i class="icon-cog icon-white"></i> <span class="status">Pending</span></span></td>';
		template += '<td id="component_topics_'+id+'"><span class="label"><i class="icon-cog icon-white"></i> <span class="status">Pending</span></span></td>';
		template += '<td id="component_panels_'+id+'"><span class="label"><i class="icon-cog icon-white"></i> <span class="status">Pending</span></span></td>';
		template += '<td id="component_reviewers_'+id+'"><span class="label"><i class="icon-cog icon-white"></i> <span class="status">Pending</span></span></td>';
		template += '<td id="component_reviewerproposals_'+id+'"><span class="label"><i class="icon-cog icon-white"></i> <span class="status">Pending</span></span></td>';
		template += '<td colspan="2"><div id="load_complete_'+id+'"></div></td>';
		row.after(template);*/

		$(e.currentTarget).after('<div id="loadstatus_'+id+'"><div class="alert" id="text_'+id+'"></div></div>');
		var load_elem = $('div#loadstatus_'+id);
//console.log(load_elem);		
		$("div#text_"+id, load_elem).html('Refreshing...');
		
		//refresh proposal data
		var loadProposalView = new App.Views.LoadProposal({ el:load_elem, prop_id:id }); //already a jquery object

		/* loadProposalView.loadProposalData([proposal.get("nsf_id")],this.options.division,this,'respondToRefresh');
		return; */ //uncomment this to run in test mode
				
	    // Check to see if we have access to nsfstarmetrics server 
		if (!this.datacheck) {
			this.datacheck = true;
			var self = this;
		    $.ajax({
		      url: "http://128.150.10.70/py/api/access",
		      dataType: 'JSONP',
		      timeout: 500,
		      success: function(data) {
		        //console.log(data);
		        proposalaccessallowed = true;
		        apiurl = "http://128.150.10.70/py/api/";
				loadProposalView.loadProposalData([proposal.get("nsf_id")],self.options.division,self,'respondToRefresh');
		      },
		      error: function(x,t,m) {
				alert('You must be connected to the NSF network to refresh proposal data');
				$(load_elem).remove();				
		      }
			});
		} else {
				if (!proposalaccessallowed) {
					alert('You must be connected to the NSF network to refresh proposal data');
					$(load_elem).remove();
				}
				else loadProposalView.loadProposalData([proposal.get("nsf_id")],this.options.division,this,'respondToRefresh');
		}		
	},
	respondToRefresh: function(status,loaded_data) {
		if (status=='ok') {
			//save and update collection
			var self = this;
			_.each(loaded_data, function(proposal_data,nsf_id) {
//console.log(proposal_data);								
//console.log(nsf_id);				
				var foundproposals = self.collection.filterbyid([nsf_id.toString()]);
//console.log(foundproposals);				
				var proposal = foundproposals.first();
//console.log(proposal);				
				var index = self.collection.indexOf(proposal);
//console.log(tmp);	
				var load_elem = 'div#loadstatus_'+proposal.id;				
				proposal.save({ 
					proposal: { 
						'details': JSON.stringify(proposal_data["details"]), 
						'researchers': JSON.stringify(proposal_data["researchers"]), 
						'topics': JSON.stringify(proposal_data["topics"]), 
						'panels': JSON.stringify(proposal_data["panels"]),
						'reviewers': JSON.stringify(proposal_data["reviewers"]),
						'reviewerproposals': JSON.stringify(proposal_data["reviewerproposals"]) 
						}
					}, {
					success: function(data) {
						$(load_elem).remove();
						//self.collection.models[index] = proposal;
						self.updateProposal();
						/*self.collection.fetch({ 
							data: { user: self.options.user_id },
							success: function() {
								self.addAll();
							}
						});*/ //dirty way to do this, try to figure out how to update the collection, fighting me at the moment, will come back to this
//						$("div#loadstatus div#status").html('<p><strong>Success!</strong> Everything loaded and assigned!');
//						$("div#loadstatus div#status").addClass("alert-success");
					},
					error: function(data) {
						//update status
						alert('Things went wrong during the load. You can try your request again.');
						$(load_elem).remove();						
					}
				});
			});		
		} else {
			//update status
			//clean this up, just alert for now
			alert('Things went wrong during the load. You can try your request again.');
			$(load_elem).remove();			
		}										 		
	},
	unassignProposal: function(e) {
		e.preventDefault();

		//what is the id? //last elem in id attr
		var id = $(e.currentTarget).attr('id').split('_').pop();
		//load proposal
		var proposal = new Proposal({ id: id });
		var self = this;
		proposal.fetch({
			success: function(model,response) {
//console.log(model);	
				//change assignments, simply remove the current user
				var assigned_users = model.get("users");
//console.log(assigned_users);		
				//get current assignments
				var assigned_user_ids = _.map(assigned_users, function(user) {
					return user.id.toString();
				});
//console.log(self.options.user_id);				
//console.log(assigned_user_ids);				
				var new_user_ids = [];
				//remove current user id from this list
				if (self.options.user_id) var new_user_ids = _.without(assigned_user_ids, [self.options.user_id]);
//console.log(new_user_ids);				
				//post update to server
				model.save({ proposal: { user_ids: new_user_ids} },{
					success: function() {
						//remove it from the collection
						//dirty way to update
						/*self.collection.fetch({ 
							data: { user: self.options.user_id }});*/
						self.updateProposal();
						//self.collection.remove(model);						
					}
				});				
			}
		});
	}
});