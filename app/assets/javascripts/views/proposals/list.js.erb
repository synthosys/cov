App.Views.ListProposal = Backbone.View.extend({
	events: {
		"click a[id^=proposals_refresh]": "refreshProposal",
		"click a[id^=proposals_remove]": "removeProposal",
		"click a[id^=proposals_unassign]": "unassignProposal"
	},
	initialize: function() {
		_.bindAll(this, 'addOne', 'addAll');
		
		this.collection = new App.Collections.Proposals();
		this.collection.bind('add', this.addOne);
		//this.collection.bind('refresh', this.addAll);
		this.collection.bind('reset', this.addAll);
		this.collection.bind('all', this.render);	
		
		this.getProposals();
	},
	addOne: function(proposal) {
//		var proposal = new App.Views.ListItemProposal({model: proposal})
//		$(this.el).append(proposal.render().el);
		//add to the datatable
		$(this.el).dataTable().fnAddData( proposal.prepareData(this.options.allowEdit,this.options.user_id) );
	},
	addAll: function() {
		$('tbody', $(this.el)).empty();
		//we're using data tables!
		var aaData = [];
//console.log(this.collection.models);			
		var self = this;
		_.each(this.collection.models,function(proposal) {
			aaData.push(proposal.prepareData(self.options.allowEdit,self.options.user_id));
		});
//console.log(aaData);			
		//prepare columns to be displayed
		//this is the default list proposals page view
		//any other view that wants to use can pass in the custom column params
		//like { "colname" : { params}, "colname" : { params }}
		var aoColumns = [
			{ 
				"sTitle": "ID",
				"bSearchable": false,
				"bVisible": false,
				"mDataProp": "id"
			},
			{ 
				"sTitle": "Prop ID",
				"bSearchable": false,
				"bVisible": false,
				"mDataProp": "nsf_id"
			},
			{ 
				"sTitle": "Division",
				"bSearchable": false,
				"bVisible": false,
				"mDataProp": "division"
			},
			{ 
				"sTitle": "Title",
				"sWidth": "500",
				"mDataProp": "title"
			},
			{
				"sTitle": "Proposal Date",
				"bSearchable": false,
				"bVisible": false,
				"mDataProp": "date"
			},
			{
				"sTitle": "Award",
				"bSearchable": false,
				"bVisible": false,
				"mDataProp": "amount"
			},
			{
				"sTitle": "Panel/s (Program Officer/s)",
				"bSearchable": false,
				"bVisible": false,
				"mDataProp": "panels"
			},
			{
				"sTitle": "Assigned To",
				"mDataProp": "assigned"
			},
			{
				"sTitle": "Last Viewed",
				"fnRender": function( oObj ) {
					if (oObj.aData.lastviewed) return $.timeago(oObj.aData.lastviewed);
					else return '';
				},
				"bUseRendered": false,
				"mDataProp": "lastviewed"
			},
			{ 
				"sTitle": "Actions",
				"sClass": "proposal-actions",
				"bSortable": false,
				"mDataProp": "actions"
			}
		];
		//does a calling view pass in any options to configure this display?
		if (this.options.columns && _.size(this.options.columns) > 0) {
			//override/append to the existing options
			for (var i=0; i<aoColumns.length;i++) {
				if (this.options.columns[aoColumns[i]["mDataProp"]]) {
					var options = this.options.columns[aoColumns[i]["mDataProp"]];
					//found one, bring over the column options
					_.each(options, function(value, key) {
						aoColumns[i][key] = value;
					});
				}
			}
		}
//console.log(aoColumns);			
		$(this.el).dataTable({
			"bDestroy":true,
			"bJQueryUI": true,
			"sPaginationType": "full_numbers",
			"iDisplayLength": 25,
			"aaData": aaData,
			"aoColumns": aoColumns,
			"aaSorting": [[8, 'desc']]
		});	
	},
	addProposal: function(proposal) {
		this.collection.add(proposal);
	},
	getProposals: function() {
		//make sure you get using json
		if (this.options.user_id) var url = this.collection.url+'/user/'+this.options.user_id+'.json';	
		else var url = this.collection.url+'.json';	
		this.collection.fetch({url: url});		
	},
	updateProposal: function(proposal) {
		//do we need to update the collection? is it updated automatically when the model is saved? not sure about this
		//update the row in the datatable
		var oTable = $(this.el).dataTable();
		var index = oTable.fnFindCellRowIndexes(proposal.id, "id");
//console.log(proposal.prepareData(this.options.allowEdit,this.options.user_id));		
		if (index!=-1) oTable.fnUpdate( proposal.prepareData(this.options.allowEdit,this.options.user_id), index[0], 0 ); // Row
	},
	clearProposal: function(proposal) {
//console.log(proposal);		
		//remove from collection - is this removed automatically when the model is destroyed? not sure
		//update - not is not! you have to remove it
		this.collection.remove(proposal);		
		//remove from datatable
		var oTable = $(this.el).dataTable();
		var index = oTable.fnFindCellRowIndexes(proposal.id, "id");
//console.log(index);		
		if (index!=-1) oTable.fnDeleteRow( index[0] ); // Row		
	},
	removeProposal: function(e) {
		e.preventDefault();
		if (!confirm('Are you sure?')) return false;
				
		//what is the id? //last elem in id attr
		var id = $(e.currentTarget).attr('id').split('_').pop();
		//load proposal
		var proposal = this.collection.get(id); //new Proposal({ id: id });
//console.log(proposal);		
		var self = this;
		proposal.destroy({
			success: function(model, response) {
				self.clearProposal(proposal);
			}
		});
	},
	refreshProposal: function(e) {
		e.preventDefault();

		//what is the id? //last elem in id attr
		var id = $(e.currentTarget).attr('id').split('_').pop();

		//find proposal in collection
		var proposal = this.collection.get(id);

		$(e.currentTarget).after('<div id="loadstatus_'+id+'"><div class="alert" id="text_'+id+'"></div></div>');
		var load_elem = $('div#loadstatus_'+id);
//console.log(load_elem);		
		$("div#text_"+id, load_elem).html('Refreshing...');
		
		//refresh proposal data
		var loadProposalView = new App.Views.LoadProposal({ el:load_elem, prop_id:id }); //already a jquery object

/* loadProposalView.loadProposalData([proposal.get("nsf_id")],this.options.division,this,'respondToRefresh');
		return; */ //uncomment this to run in test mode
				
	    // Check to see if we have access to nsfstarmetrics server 
		if (!this.datacheck) {
			this.datacheck = true;
			var self = this;
		    $.ajax({
		      url: "http://128.150.10.70/py/api/access",
		      dataType: 'JSONP',
		      timeout: 500,
		      success: function(data) {
		        //console.log(data);
		        proposalaccessallowed = true;
		        apiurl = "http://128.150.10.70/py/api/";
				loadProposalView.loadProposalData([proposal.get("nsf_id")],self.options.division,self,'respondToRefresh');
		      },
		      error: function(x,t,m) {
				alert('You must be connected to the NSF network to refresh proposal data');
				$(load_elem).remove();				
		      }
			});
		} else {
				if (!proposalaccessallowed) {
					alert('You must be connected to the NSF network to refresh proposal data');
					$(load_elem).remove();
				}
				else loadProposalView.loadProposalData([proposal.get("nsf_id")],this.options.division,this,'respondToRefresh');
		}		
	},
	respondToRefresh: function(status,loaded_data) {
		if (status=='ok') {
			//save and update collection
			var self = this;
			_.each(loaded_data, function(proposal_data,nsf_id) {
//console.log(proposal_data);								
//console.log(nsf_id);				
				var foundproposals = self.collection.filterbyid([nsf_id.toString()]);
//console.log(foundproposals);				
				var proposal = foundproposals.first();
//console.log(proposal);				
//console.log(tmp);	
				var load_elem = 'div#loadstatus_'+proposal.id;				
				proposal.save({ 
					proposal: {
						'division': proposal_data["details"]["org"]["name"],
						'details': JSON.stringify(proposal_data["details"]), 
						'researchers': JSON.stringify(proposal_data["researchers"]), 
						'topics': JSON.stringify(proposal_data["topics"]), 
						'panels': JSON.stringify(proposal_data["panels"]),
						'reviewers': JSON.stringify(proposal_data["reviewers"]),
						'reviewerproposals': JSON.stringify(proposal_data["reviewerproposals"]) 
						}
					}, {
					success: function(data) {
						$(load_elem).remove();
						self.updateProposal(proposal);
					},
					error: function(data) {
						//update status
						alert('Things went wrong during the load. You can try your request again.');
						$(load_elem).remove();						
					}
				});
			});		
		} else {
			//update status
			//clean this up, just alert for now
			alert('Things went wrong during the load. You can try your request again.');
			$(load_elem).remove();			
		}										 		
	},
	unassignProposal: function(e) {
		e.preventDefault();

		//what is the id? //last elem in id attr
		var tmp = $(e.currentTarget).attr('id').split('_').pop();
		var id = tmp.split('-')[0];
		var user_id = tmp.split('-')[1];
		
		//load proposal
		var proposal = new Proposal({ id: id });
		var self = this;
		proposal.fetch({
			success: function(model,response) {
//console.log(model);	
				//change assignments, simply remove the current user
				var assigned_users = model.get("users");
//console.log(assigned_users);		
				//get current assignments
				var assigned_user_ids = _.map(assigned_users, function(user) {
					return user.id.toString();
				});
//console.log(self.options.user_id);				
//console.log(assigned_user_ids);				
				var new_user_ids = [];
				//remove current user id from this list
				//if (self.options.user_id) var new_user_ids = _.without(assigned_user_ids, [self.options.user_id]);
				if (user_id) var new_user_ids = _.without(assigned_user_ids, [user_id]);
//console.log(new_user_ids);				
				//post update to server
				model.save({ proposal: { user_ids: new_user_ids} },{
					success: function() {
						if (self.options.user_id) self.clearProposal(proposal);
						else {
							//get the updated value
							proposal.fetch({
								success: function(model,response) {
									self.updateProposal(model);
								}
							});
						}
					}
				});				
			}
		});
	}
});