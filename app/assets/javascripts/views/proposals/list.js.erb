App.Views.ListProposal = Backbone.View.extend({
	events: {
		"click a[id^=proposals_refresh]": "refreshProposal",
		"click a[id^=proposals_remove]": "removeProposal",
		"click a[id^=proposals_unassign]": "unassignProposal"
	},
	initialize: function() {
		_.bindAll(this, 'addOne', 'render');
		
		this.collection = new App.Collections.Proposals();
		this.collection.bind('add', this.addOne);
		this.collection.bind('reset', this.render);
		
		//initialize with bootstrapped data
		this.collection.reset(this.options.proposals);
	},
	addOne: function(proposal) {
		//add to the datatable
		$(this.el).dataTable().fnAddData( this.prepareData(proposal,this.options.allowEdit,this.options.user_id) );
	},
	render: function() {
		$('tbody', $(this.el)).empty();
		//we're using data tables!
		var aaData = [];
		var self = this;
		_.each(this.collection.models,function(proposal) {
			aaData.push(self.prepareData(proposal,self.options.allowEdit,self.options.user_id));
		});
		//prepare columns to be displayed
		//this is the default list proposals page view
		//any other view that wants to use can pass in the custom column params
		//like { "colname" : { params}, "colname" : { params }}
		var aoColumns = [
			{ 
				"sTitle": "ID",
				"bSearchable": false,
				"bVisible": false,
				"mDataProp": "id"
			},
			{ 
				"sTitle": "Prop ID",
				"bSearchable": false,
				"bVisible": false,
				"mDataProp": "nsf_id"
			},
			{ 
				"sTitle": "Division",
				"bSearchable": false,
				"bVisible": false,
				"mDataProp": "division"
			},
			{ 
				"sTitle": "Title",
				"sWidth": "500",
				"mDataProp": "title"
			},
			{
				"sTitle": "Proposal Date",
				"bSearchable": false,
				"bVisible": false,
				"mDataProp": "date"
			},
			{
				"sTitle": "Award",
				"bSearchable": false,
				"bVisible": false,
				"mDataProp": "amount"
			},
			{
				"sTitle": "Panel/s (Program Officer/s)",
				"bSearchable": false,
				"bVisible": false,
				"mDataProp": "panels"
			},
			{
				"sTitle": "Assigned To",
				"mDataProp": "assigned"
			},
			{
				"sTitle": "Last Viewed",
				"fnRender": function( oObj ) {
					if (oObj.aData.lastviewed) return $.timeago(oObj.aData.lastviewed);
					else return '';
				},
				"bUseRendered": false,
				"mDataProp": "lastviewed"
			},
			{
				"sTitle": "Last Updated",
				"fnRender": function( oObj ) {
					if (oObj.aData.lastupdated) return $.timeago(oObj.aData.lastupdated);
					else return '';
				},
				"bUseRendered": false,
				"bVisible": false,
				"mDataProp": "lastupdated"
			},
			{ 
				"sTitle": "Actions",
				"sClass": "proposal-actions",
				"bSortable": false,
				"mDataProp": "actions"
			}
		];
		//does a calling view pass in any options to configure this display?
		if (this.options.columns && _.size(this.options.columns) > 0) {
			//override/append to the existing options
			for (var i=0; i<aoColumns.length;i++) {
				if (this.options.columns[aoColumns[i]["mDataProp"]]) {
					var options = this.options.columns[aoColumns[i]["mDataProp"]];
					//found one, bring over the column options
					_.each(options, function(value, key) {
						aoColumns[i][key] = value;
					});
				}
			}
		}
		$(this.el).dataTable({
			"bDestroy":true,
			"bJQueryUI": true,
			"sPaginationType": "full_numbers",
			"iDisplayLength": 25,
			"aaData": aaData,
			"aoColumns": aoColumns,
			"aaSorting": [[8, 'desc']]
		});	

		//backbone convention to allow chaining
		return this;
	},
	addProposal: function(proposal) {
		this.collection.add(proposal);
	},
	updateProposal: function(proposal) {
		//do we need to update the collection? is it updated automatically when the model is saved? not sure about this
		//update the row in the datatable
		var oTable = $(this.el).dataTable();
		var index = oTable.fnFindCellRowIndexes(proposal.id, "id");
		if (index!=-1) oTable.fnUpdate( this.prepareData(proposal,this.options.allowEdit,this.options.user_id), index[0], 0 ); // Row
	},
	clearProposal: function(proposal) {
		//remove from collection
		this.collection.remove(proposal);		
		//remove from datatable
		var oTable = $(this.el).dataTable();
		var index = oTable.fnFindCellRowIndexes(proposal.id, "id");
		if (index!=-1) oTable.fnDeleteRow( index[0] ); // Row		
	},
	removeProposal: function(e) {
		e.preventDefault();
		if (!confirm('Are you sure?')) return false;
				
		//what is the id? //last elem in id attr
		var id = $(e.currentTarget).attr('id').split('_').pop();
		//load proposal
		var proposal = this.collection.get(id); //new Proposal({ id: id });
		var self = this;
		proposal.destroy({
			success: function(model, response) {
				self.clearProposal(proposal);
			}
		});
	},
	refreshProposal: function(e) {
		e.preventDefault();

		//what is the id? //last elem in id attr
		var id = $(e.currentTarget).attr('id').split('_').pop();

		//find proposal in collection
		var proposal = this.collection.get(id);

		$(e.currentTarget).after('<div id="loadstatus_'+id+'"><div class="alert" id="text_'+id+'"></div></div>');
		var load_elem = $('div#loadstatus_'+id);
		$("div#text_"+id, load_elem).html('Refreshing...');
		
		//refresh proposal data
		if (!this.loadProposalView) this.loadProposalView = new App.Views.LoadProposal;
		this.loadProposalView.options.el = load_elem;
		this.loadProposalView.options.prop_id = id;

/* this.loadProposalView.loadProposalData([proposal.get("nsf_id")],this.options.division,this,'respondToRefresh');
		return; */ //uncomment this to run in test mode
				
	    // Check to see if we have access to nsfstarmetrics server 
		if (!this.datacheck) {
			this.datacheck = true;
			var self = this;
		    $.ajax({
		      url: "http://128.150.10.70/py/api/access",
		      dataType: 'JSONP',
		      timeout: 500,
		      success: function(data) {
		        proposalaccessallowed = true;
		        apiurl = "http://128.150.10.70/py/api/";
				self.loadProposalView.loadProposalData([proposal.get("nsf_id")],self.options.division,self,'respondToRefresh');
		      },
		      error: function(x,t,m) {
				alert('You must be connected to the NSF network to refresh proposal data');
				$(load_elem).remove();				
		      }
			});
		} else {
			if (!proposalaccessallowed) {
				alert('You must be connected to the NSF network to refresh proposal data');
				$(load_elem).remove();
			}
			else this.loadProposalView.loadProposalData([proposal.get("nsf_id")],this.options.division,this,'respondToRefresh');
		}		
	},
	respondToRefresh: function(status,loaded_data) {
		if (status=='ok') {
			//save and update collection
			var self = this;
			_.each(loaded_data, function(proposal_data,nsf_id) {
				var foundproposals = self.collection.filterbyid([nsf_id.toString()]);
				var proposal = foundproposals.first();
				var load_elem = 'div#loadstatus_'+proposal.id;				
				proposal.save({ 
					proposal: {
						'division': proposal_data["details"]["org"]["name"],
						'details': JSON.stringify(proposal_data["details"]), 
						'researchers': JSON.stringify(proposal_data["researchers"]), 
						'topics': JSON.stringify(proposal_data["topics"]), 
						'panels': JSON.stringify(proposal_data["panels"]),
						'reviewers': JSON.stringify(proposal_data["reviewers"]),
						'reviewerproposals': JSON.stringify(proposal_data["reviewerproposals"]) 
						}
					}, {
					success: function(data) {
						$(load_elem).remove();
						//get the proposal again so we get all the updated info from the back end
						proposal.fetch({
							success: function(model,response) {								
								self.updateProposal(model);
							}
						});
					},
					error: function(data) {
						//update status
						alert('Things went wrong during the load. You can try your request again.');
						$(load_elem).remove();						
					}
				});
			});		
		} else {
			//update status
			//clean this up, just alert for now
			alert('Things went wrong during the load. You can try your request again.');
			$('div[id^=loadstatus_]').remove();			
		}										 		
	},
	unassignProposal: function(e) {
		e.preventDefault();

		//what is the id? //last elem in id attr
		var tmp = $(e.currentTarget).attr('id').split('_').pop();
		var id = tmp.split('-')[0];
		var user_id = tmp.split('-')[1];
		
		//this applies to when we're looking at proposals for a particular user but we do it generally
		//instead of using what we already have, we have to retrieve it again because Rails
		//isn't giving me back all the users who were assigned, only the one that we're looking at
		//this will break the unassignment process so first we have to get the proposal in its current state
		//this seems pointless, need to look to see how to avoid this
		//load proposal
		var proposal = new Proposal({ id: id });
		var self = this;
		proposal.fetch({
			success: function(model,response) {
				//change assignments, simply remove the current user
				var assigned_users = model.get("users");
				//get current assignments
				var assigned_user_ids = _.map(assigned_users, function(user) {
					return user.id.toString();
				});
				var new_user_ids = [];
				//remove current user id from this list
				if (user_id) var new_user_ids = _.without(assigned_user_ids, [user_id]);
				//post update to server
				model.save({ proposal: { user_ids: new_user_ids} },{
					success: function(response) {
//console.log(response);						
						if (self.options.user_id) self.clearProposal(proposal);
						else {
							//update the users in the model
							var tmp = _.filter(assigned_users, function(user) {
								return $.inArray(user.id.toString(), new_user_ids) != -1;
							})
							model.set("users", tmp);
							self.updateProposal(model);
						}
					}
				});
			}
		});
	},
	prepareData: function(proposal,allowedit,user_id) {
		//returns as an array, datatable ready
		var nsf_id = proposal.get('nsf_id');
		var division = proposal.get('division');
		var title = '<a href="'+baseURI+'/proposals/'+proposal.id+'">'+nsf_id+'</a> - '+proposal.title();
		var date = proposal.status_date();
		if (proposal.status()=="award") var amount = proposal.amount(); else var amount = "(declined)";			
		var tmp = [];
		var panels = proposal.panels_raw();
		_.each(panels, function(panel) {
			tmp.push(panel["nsf_id"]+' - '+panel["name"]+' ('+panel["officer"]+')');
		});
		var panels = tmp.join('<br />');		
		var assigned = [];
		var users = proposal.assigned_users();
		_.each(users, function(user) {
			assigned.push('<i class="icon-user"></i> <a href="'+baseURI+'/users/'+user.id+'">'+user.name+'</a> (<a href="#" id="proposals_unassign_'+proposal.id+'-'+user.id+'">Remove</a>)');
		});
		assigned = assigned.join('<br />');
		//associations - last viewed
		var lastviewed = [];
		var associations = proposal.associations();
		associations = _.sortBy(associations, function(association){ association.lastviewed; });
		_.each(associations, function(association) {
			if (association.lastviewed) lastviewed.push(association.lastviewed);
		});
		lastviewed = _.last(lastviewed)?_.last(lastviewed):''; //.join('<br />');
		var actions = '';
		actions += '<a href="'+baseURI+'/proposals/'+proposal.id+'"><i class="icon-zoom-in"></i>Show</a><br />';
		if (allowedit) {
			actions += '<a href="'+baseURI+'/proposals/'+proposal.id+'/edit"><i class="icon-pencil"></i>Edit</a>';
			if (user_id) actions += '<a href="#" id="proposals_unassign_'+proposal.id+'-'+user_id+'"><i class="icon-remove"></i>Remove</a>';
			else actions += '<a href="#" id="proposals_remove_'+proposal.id+'"><i class="icon-remove"></i>Remove</a>';
			actions += '<a href="#" id="proposals_refresh_'+proposal.id+'"><i class="icon-refresh"></i>Refresh</a>';
		} else if (user_id) {
			actions += '<a href="#" id="proposals_unassign_'+proposal.id+'-'+user_id+'"><i class="icon-remove"></i>Remove</a>';
		}
		var lastupdated = proposal.get("updated_at");
		//title, date, amount, panels, assigned users, lastviewed, actions
		//return [col1, col2, col3, col4, col5, col6, col7]; //datatable ready
		return { "id": proposal.id, "nsf_id": nsf_id, "division": division, "title": title, "date": date, "amount": amount, "panels": panels, "assigned": assigned, "lastviewed": lastviewed, "lastupdated": lastupdated, "actions": actions };
	}
});