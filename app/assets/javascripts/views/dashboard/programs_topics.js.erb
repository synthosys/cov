App.Views.dashboardProgramsTopics = Backbone.View.extend({
	events: {
		"click button#gobackto": "goBackTo",
		"click button#update": "render",
		"click button#reset": "reset",
		"change select#filter_year_from": "load",
		"change select#filter_year_to": "load",
		"click a[id^=link_to_topics_divisions_]": 'gotoTopicsDivisions'
	},
	initialize: function() {
		//use the topics collection, it has a special function that will load all topic relevances!
		this.collection = new App.Collections.Topics;
		this.collection.on('loadcomplete', this.render, this);

		var self = this;
		require(['text!templates/dashboard/programs_topics.html'], function(html) {
			var template = _.template(html);
			//we make this query so many times, think about how to improve it
			// lookup using pge legend in the data api
			$.getJSON(apiurl+"prop?legend=nsf_pge&q="+self.options.pge+"&jsoncallback=?", function(data){
				var html = template({pge:self.options.pge,label:data?data[0].label:''}); //save it off
				$(self.el).html(html);
				//set year selection
				var startYear = getStartYear();
				var endYear = getEndYear();
				var year = self.options.params['year']?self.options.params['year'].split('-'):[startYear,endYear];
				$("select#filter_year_from", self.el).html(App.renderYearSelect(getStartYear(),getCurrentYear(),year[0]?year[0]:startYear));
				$("select#filter_year_to", self.el).html(App.renderYearSelect(getStartYear(),getCurrentYear(),year[1]?year[1]:endYear));
				//load
				self.load();
            });
		});
	},
	goBackTo: function(e) {
		e.preventDefault();

		window.history.back();		
	},
	gotoTopicsDivisions: function(e) {
		e.preventDefault();
		
		var id = $(e.currentTarget).attr('id').split('_').pop();
		
		window.location.href = baseURI+'/research#topics/divisions/'+id+'/?year='+$('select#filter_year_from', this.el).val()+'-'+$('select#filter_year_to', this.el).val();
	},
	reset: function(e) {
		e.preventDefault();
		
		$("input#t1").val('4');
		$("input#t2").val('3');
		$("input#t3").val('2');
		$("input#t4").val('1');
		
		this.render();
	},
	load: function(e) {
		if (e) e.preventDefault();
		
		if ($('select#filter_year_from', this.el).val()>$('select#filter_year_to', this.el).val()) {
			alert('Pick an appropriate date range');
			return;
		}
		
		$('div#loader', this.el).html("<img src='" + baseURI + "/assets/ajax-load.gif" + "'/> Loading topics");

		//load	
		var year = $("select#filter_year_from", this.el).val()?$("select#filter_year_from", this.el).val():getStartYear();
		year += '-';
		year += $("select#filter_year_to", this.el).val()?$("select#filter_year_to", this.el).val():getEndYear();
		this.collection.load({org:getDivision()+','+this.options.pge,year:year});
	},
	render: function() {
		$('div#loader', this.el).html('');
		
		//prepare for datatable data - conv to array
		var self = this;
		var years = this.getYears(this.collection.loaded_topics);
		var data = _.map(this.collection.loaded_topics, function(row) {
			var topicid = row.t;
			//the suppres attribute is used to suppress t0 topics for now
			var suppress = (topicid=='0')?'1':'0';
			//figure out the weights and relevances here
			var topic_weightedprevalence = 0;
			_.each([1,2,3,4], function(topicrelevance) {
				topicrelevance = 't'+topicrelevance.toString();
				if (row[topicrelevance]) {
					var tmp = row[topicrelevance]['count']['award']+row[topicrelevance]['count']['decline']+row[topicrelevance]['count']['other'];
					//read the topic weight input
					var el = $('input#'+topicrelevance, self.el);
					var weight = (el&&el.val())?el.val():'0';
					topic_weightedprevalence += (tmp*weight);					
				}
			});
			//figure out the growth rate here
			var growthCount = 0;
			var growthFunding = 0;
			for (var j=1;j<years.length;j++) {
				var denom = row.years[years[j]].count.award+row.years[years[j-1]].count.award;
				if (row.years[years[j-1]].count.award) growthCount += (row.years[years[j]].count.award-row.years[years[j-1]].count.award)/denom;
				if (row.years[years[j-1]].funding.award) growthFunding += (row.years[years[j]].funding.award-row.years[years[j-1]].funding.award)/row.years[years[j-1]].funding.award;
			}
			if (years.length>0) {
				growthCount = (growthCount/years.length).toFixed(2);
				growthFunding = (growthFunding/years.length).toFixed(2);
			}
			//return it
			return {weighted:topic_weightedprevalence, topicid:topicid, label:row["label"], words:row["words"], count:{award:row.count.award,decline:row.count.decline,other:row.count.other},funding:{award:row.funding.award,request:row.funding.request},suppress:suppress,growth:{count:growthCount,funding:growthFunding}};
		});

		//columns
		var self = this;
		var columns = [
			{
				"bVisible": false,
				"mDataProp": "suppress"
			},
			{
				"sTitle": "Prevalence (Weighted)",
				"fnRender": function( oObj ) {
					return oObj.aData.weighted.toFixed(0);
				},
				"asSorting": [ "desc", "asc" ], //first sort desc, then asc
				"mDataProp": "weighted"
			},
			{
				"fnRender": function ( oObj ) {
					var html = "<a href='#' id='link_to_topics_divisions_"+oObj.aData.topicid+"'><strong>t"+oObj.aData.topicid+'</strong></a>';
					if (oObj.aData.words) html += ': '+oObj.aData.words;
					return html;
				},
				"sTitle": "Topic",
				"mDataProp": "label"
			},
			{
				"sTitle": "Awarded",
				"asSorting": [ "desc", "asc" ], //first sort desc, then asc
				"mDataProp": "count.award"
			},
			{
				"fnRender": function ( oObj ) {
					return self.collection.formatFunding(oObj.aData.funding.award);
				},
				"bUseRendered": false,
				"sTitle": "Awarded Amt.",
				"asSorting": [ "desc", "asc" ], //first sort desc, then asc
				"mDataProp": "funding.award"
			}
		];
		if (years.length>0) {
			columns.push({
				"sTitle": "Growth (#)",
				"asSorting": [ "desc", "asc" ], //first sort desc, then asc
				"mDataProp": "growth.count"				
			});
		}
		if (proposalaccessallowed) {
			columns.push({
				"sTitle": "Declined",
				"asSorting": [ "desc", "asc" ], //first sort desc, then asc
				"mDataProp": "count.decline"
			});
			columns.push({
				"sTitle": "Other",
				"asSorting": [ "desc", "asc" ], //first sort desc, then asc
				"mDataProp": "count.other"
			});
			columns.push({
				"fnRender": function ( oObj ) {
					return self.collection.formatFunding(oObj.aData.funding.request);
				},
				"bUseRendered": false,
				"sTitle": "Requested Amt.",
				"asSorting": [ "desc", "asc" ], //first sort desc, then asc
				"mDataProp": "funding.request"
			});
		}

		App.renderDataTable($('#topics_table', this.el),{
			"aaData": data,
			"aoColumns": columns,
			"aaSorting": [[0, 'asc'],[3, 'desc']]
		});

		//backbone convention to allow chaining
		return this;
	},
	getYears: function(data) {
		//make a list of unique years
		var years = [];
		_.each(data, function(row) {
			if (row.years) {
				_.each(row.years, function(value,key) {
					//key is year
					if ($.inArray(key,years)==-1) years.push(key);
				});
			}
		});
		years = _.sortBy(years, function(year) { return year; });

		return years;
	}
});
